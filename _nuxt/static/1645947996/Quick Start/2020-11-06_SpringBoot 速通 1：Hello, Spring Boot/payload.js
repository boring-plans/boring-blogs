__NUXT_JSONP__("/Quick%20Start/2020-11-06_SpringBoot%20%E9%80%9F%E9%80%9A%201%EF%BC%9AHello,%20Spring%20Boot", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O){return {data:[{article:{slug:"2020-11-06_SpringBoot 速通 1：Hello, Spring Boot",toc:[{id:o,depth:t,text:o},{id:y,depth:t,text:z},{id:A,depth:m,text:B},{id:C,depth:m,text:u},{id:D,depth:m,text:E},{id:F,depth:t,text:G},{id:p,depth:m,text:p},{id:q,depth:m,text:q},{id:r,depth:m,text:r}],body:{type:"root",children:[{type:b,tag:v,props:{id:o},children:[{type:b,tag:g,props:{href:"#%E6%A5%94%E5%AD%90",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:o}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"因为时间与地域的关系，陶某于 2020 年 10 月 27 日开始系统学 SpringBoot。由于出发点远不是"},{type:b,tag:w,props:{},children:[{type:a,value:"爱"}]},{type:a,value:"，故这场学习将无与伦比地枯燥、艰辛、充满矛盾。但贫苦布衣的人生本就如此。"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"“你是否愿意学习 SB，无论是顺境或逆境，富裕或贫穷，健康或疾病，快乐或忧愁，你都将毫无保留地爱她，对她忠诚直到永远？”"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"..."}]},{type:a,value:c},{type:b,tag:v,props:{id:y},children:[{type:b,tag:g,props:{href:"#spring-%E5%BF%85%E8%A6%81%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:z}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"由于 Java 历史之悠久、Spring 框架之繁荣，使用 Spring Boot 时，不得不预先掌握一些通用概念。包括但不限于："}]},{type:a,value:c},{type:b,tag:n,props:{id:A},children:[{type:b,tag:g,props:{href:"#java-bean-%E4%B8%8E-pojo-%E4%B8%8E-spring-bean",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:B}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"Java Bean 诞生在很久很久以前，那个桌面应用开发百花齐放的时代。其出生的本意是，通过编写"},{type:b,tag:w,props:{},children:[{type:a,value:H}]},{type:a,value:"，利用"},{type:b,tag:w,props:{},children:[{type:a,value:"运行时可以读取到类全部属性的技术（也就是反射）"}]},{type:a,value:"，实现诸如 Button、TextArea、Text 等等可视化组件的封装，以便进行类似于某 Basic 拖拽式桌面应用开发。而此间的 "},{type:b,tag:d,props:{},children:[{type:a,value:H}]},{type:a,value:" 便是 Java Bean，它首先是一个 Java 类，其次需要满足一些既定规范："}]},{type:a,value:c},{type:b,tag:s,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"具有一个无参构造函数"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"所有属性都声明为 "},{type:b,tag:d,props:{},children:[{type:a,value:I}]},{type:a,value:"，通过声明为 "},{type:b,tag:d,props:{},children:[{type:a,value:J}]},{type:a,value:" 的形如 "},{type:b,tag:d,props:{},children:[{type:a,value:"getCertainAttr"}]},{type:a,value:" 的 getter 方法获取属性、形如 "},{type:b,tag:d,props:{},children:[{type:a,value:"setCertainAttr"}]},{type:a,value:" 的 setter 方法设置属性。特殊地，布尔类型的 getter 方法形如 "},{type:b,tag:d,props:{},children:[{type:a,value:"isCertainAtrr"}]},{type:a,value:x}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"可序列化（继承自 Serializable，本意为了保存组件状态，以便还原状态（比如保存、关闭后，再次打开项目），继续开发）"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"当然，在桌面组件化开发的市场上，Java 不是很成功（主要是 Sun 公司），但 Java Bean 是无辜的，好不容易编的一套规范，也许可以放在服务端开发上。于是 Java Bean 成了 MVC 中的 M，主要用以传递数据、更方便地与持久层互动。但由于 Java Bean 过分轻量，与我 Sun 堂堂 企业级应用 格格不入（需要开发者去反复地自行实现一些简单、低级的功能），这无疑增加了高贵的、只想关注业务逻辑的企业级应用开发者们的心智负担，于是基于 JB，更加周到的 EJB（Enterprise Java Bean）应运而生。"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"然而，周到的代价是繁琐，很快，EJB 就失去了贪婪但懒惰的人们的宠爱。更有甚者，高调吹捧 "},{type:b,tag:d,props:{},children:[{type:a,value:"Plain Old Java Object"}]},{type:a,value:"（也有言曰 "},{type:b,tag:d,props:{},children:[{type:a,value:"Plain Ordinary Java Object"}]},{type:a,value:"，意译过来就是，平淡无奇的 Java 对象），想要来一场 Java 届的伟大的文艺复兴。按照业界共识，一个 POJO 无需遵循 Java Bean 的上古规范，理应淋漓尽致地体现 "},{type:b,tag:d,props:{},children:[{type:a,value:"plain"}]},{type:a,value:"："}]},{type:a,value:c},{type:b,tag:s,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"属性声明为 "},{type:b,tag:d,props:{},children:[{type:a,value:I}]},{type:a,value:" ，通过 "},{type:b,tag:d,props:{},children:[{type:a,value:J}]},{type:a,value:" 的 getter 、setter 方法获取、设置属性"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"不继承自任何类"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"不实现任何接口"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"不被任何框架侵入"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"理想状态下，POJO 用于数据传递，以便更自如地与 DAO 层（也就是持久层）交互。"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"后来，作为革命的一方里程碑，一个叫 Spring 的框架出生了。该框架通过自带的 "},{type:b,tag:d,props:{},children:[{type:a,value:"Spring 容器"}]},{type:a,value:"，对对象进行管理，再辅助以 IOC、AOP 技术，既避免了繁琐，又保障了安全、减少了心智负担（既可以贪，又可以懒）。而此间的类，无需规范，不管你 POJO 不 POJO、EJB 不 EJB，只要能为容器所管理即可。同时，出于爱与敬意，此间的类也被叫做 Bean，又为人唤作 "},{type:b,tag:d,props:{},children:[{type:a,value:"Spring Bean"}]},{type:a,value:x}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"此外，Java 世界的 Bean 取其 "},{type:b,tag:d,props:{},children:[{type:a,value:"咖啡豆"}]},{type:a,value:" 之意，妙哉。"}]},{type:a,value:c},{type:b,tag:n,props:{id:C},children:[{type:b,tag:g,props:{href:"#ioc",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:u}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"所谓 "},{type:b,tag:d,props:{},children:[{type:a,value:u}]},{type:a,value:"，即 Inversion Of Control，直译为"},{type:b,tag:d,props:{},children:[{type:a,value:"控制反转"}]},{type:a,value:"。所谓反转，可以理解为 转变原本的 A Call B，为 A Wait For B。原本 A 中想要使用 B 中的功能，需要自行实例化 B，这样的缺点在于，一旦 B 有所改变（方法等调用方式有所变更），迫使 A 也要修改。而有了 IOC，类与类间的依赖统一交由容器进行管理，类与类间解耦，故又被叫作 "},{type:b,tag:d,props:{},children:[{type:a,value:"依赖注入"}]},{type:a,value:x}]},{type:a,value:c},{type:b,tag:n,props:{id:D},children:[{type:b,tag:g,props:{href:"#aop",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:E}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"所谓，AOP 即 Aspect Oriented Programming，直译为 "},{type:b,tag:d,props:{},children:[{type:a,value:"面向切面编程"}]},{type:a,value:"。此前，对于一些重复的 日志记录、事务书写 的过程，开发者们需要一遍一遍地复制粘贴。此后，通过动态代理技术，这些过程宛如立身于一个切面，不在三界之中，独善五行之外。"}]},{type:a,value:c},{type:b,tag:v,props:{id:F},children:[{type:b,tag:g,props:{href:"#%E5%85%B3%E4%BA%8E-spring-boot",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:G}]},{type:a,value:c},{type:b,tag:n,props:{id:p},children:[{type:b,tag:g,props:{href:"#%E6%A6%82%E8%A7%88",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:p}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"使用大于六级的水平，意译官网的 overview 中关于 SB 的介绍为："}]},{type:a,value:c},{type:b,tag:"blockquote",props:{},children:[{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"SB 使得创建 可独立运行、生产级、基于 Spring 框架的应用 变得"},{type:b,tag:"del",props:{},children:[{type:a,value:"巨几把"}]},{type:a,value:"简单，你所要做的，仅仅是运行应用而已。"}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"简而言之，我们从 减少心智负担 出发，整合了 Spring 框架与一些三方库，以便你可以以最少的配置进行 Spring 应用开发。"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:e,props:{},children:[{type:a,value:"总之，主张“约定优于配置”的 Spring Boot，使 Spring 开发无比简洁、极其快速。"}]},{type:a,value:c},{type:b,tag:n,props:{id:q},children:[{type:b,tag:g,props:{href:"#%E7%89%B9%E6%80%A7",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:q}]},{type:a,value:c},{type:b,tag:s,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"创建可独立运行的 Spring 应用"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"内置 Tomcat、Jetty 或 Undertow，无需部署 WAR 文件"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"提供解放双手、简化构建配置的 "},{type:b,tag:d,props:{},children:[{type:a,value:"starter"}]}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"自动、即时地配置 Spring 框架、三方库"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"提供 准生产 的特性，你比如度量指标、健康检查、加载配置信息"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"绝无代码生成，绝不需 xml 配置"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:n,props:{id:r},children:[{type:b,tag:g,props:{href:"#%E5%8F%82%E8%80%83",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:r}]},{type:a,value:c},{type:b,tag:s,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:b,tag:g,props:{href:"https:\u002F\u002Fmp.weixin.qq.com\u002Fs?__biz=MzAxOTc0NzExNg==&mid=2665513115&idx=1&sn=da30cf3d3f163d478748fcdf721b6414#rd",rel:[K,L,M],target:N},children:[{type:a,value:"Java 帝国之 Java bean (上）"}]}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:b,tag:g,props:{href:"https:\u002F\u002Fmp.weixin.qq.com\u002Fs?__biz=MzAxOTc0NzExNg==&mid=2665513118&idx=1&sn=487fefb8fa7efd59de6f37043eb21799#rd",rel:[K,L,M],target:N},children:[{type:a,value:"Java 帝国之 Java bean（下）"}]}]},{type:a,value:c}]}]},dir:"\u002FQuick Start",path:"\u002FQuick Start\u002F2020-11-06_SpringBoot 速通 1：Hello, Spring Boot",extension:".md",createdAt:O,updatedAt:O}}],fetch:{},mutations:[]}}("text","element","\n","code","p","li","a","true",-1,"span","icon","icon-link",3,"h3","楔子","概览","特性","参考","ul",2,"IOC","h2","strong","。","spring-必要基础知识点","Spring 必要基础知识点","java-bean-与-pojo-与-spring-bean","Java Bean 与 POJO 与 Spring Bean","ioc","aop","AOP","关于-spring-boot","关于 Spring Boot","符合既定规范的类","private","public","nofollow","noopener","noreferrer","_blank","2022-02-27T07:44:23.692Z")));